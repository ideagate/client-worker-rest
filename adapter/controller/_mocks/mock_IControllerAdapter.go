// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/bayu-aditya/ideagate/backend/model/gen-go/client/controller/v1"
)

// MockIControllerAdapter is an autogenerated mock type for the IControllerAdapter type
type MockIControllerAdapter struct {
	mock.Mock
}

type MockIControllerAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIControllerAdapter) EXPECT() *MockIControllerAdapter_Expecter {
	return &MockIControllerAdapter_Expecter{mock: &_m.Mock}
}

// GetListEndpoint provides a mock function with given fields: ctx
func (_m *MockIControllerAdapter) GetListEndpoint(ctx context.Context) (*v1.GetListEndpointResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetListEndpoint")
	}

	var r0 *v1.GetListEndpointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*v1.GetListEndpointResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *v1.GetListEndpointResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetListEndpointResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIControllerAdapter_GetListEndpoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListEndpoint'
type MockIControllerAdapter_GetListEndpoint_Call struct {
	*mock.Call
}

// GetListEndpoint is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIControllerAdapter_Expecter) GetListEndpoint(ctx interface{}) *MockIControllerAdapter_GetListEndpoint_Call {
	return &MockIControllerAdapter_GetListEndpoint_Call{Call: _e.mock.On("GetListEndpoint", ctx)}
}

func (_c *MockIControllerAdapter_GetListEndpoint_Call) Run(run func(ctx context.Context)) *MockIControllerAdapter_GetListEndpoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIControllerAdapter_GetListEndpoint_Call) Return(_a0 *v1.GetListEndpointResponse, _a1 error) *MockIControllerAdapter_GetListEndpoint_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIControllerAdapter_GetListEndpoint_Call) RunAndReturn(run func(context.Context) (*v1.GetListEndpointResponse, error)) *MockIControllerAdapter_GetListEndpoint_Call {
	_c.Call.Return(run)
	return _c
}

// GetWorkflow provides a mock function with given fields: ctx, entrypointID
func (_m *MockIControllerAdapter) GetWorkflow(ctx context.Context, entrypointID string) (*v1.GetWorkflowResponse, error) {
	ret := _m.Called(ctx, entrypointID)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *v1.GetWorkflowResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*v1.GetWorkflowResponse, error)); ok {
		return rf(ctx, entrypointID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *v1.GetWorkflowResponse); ok {
		r0 = rf(ctx, entrypointID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.GetWorkflowResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entrypointID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIControllerAdapter_GetWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWorkflow'
type MockIControllerAdapter_GetWorkflow_Call struct {
	*mock.Call
}

// GetWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - entrypointID string
func (_e *MockIControllerAdapter_Expecter) GetWorkflow(ctx interface{}, entrypointID interface{}) *MockIControllerAdapter_GetWorkflow_Call {
	return &MockIControllerAdapter_GetWorkflow_Call{Call: _e.mock.On("GetWorkflow", ctx, entrypointID)}
}

func (_c *MockIControllerAdapter_GetWorkflow_Call) Run(run func(ctx context.Context, entrypointID string)) *MockIControllerAdapter_GetWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIControllerAdapter_GetWorkflow_Call) Return(_a0 *v1.GetWorkflowResponse, _a1 error) *MockIControllerAdapter_GetWorkflow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIControllerAdapter_GetWorkflow_Call) RunAndReturn(run func(context.Context, string) (*v1.GetWorkflowResponse, error)) *MockIControllerAdapter_GetWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIControllerAdapter creates a new instance of MockIControllerAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIControllerAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIControllerAdapter {
	mock := &MockIControllerAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
